{"version":3,"sources":["NextButton.js","Item.js","QuestionList.js","Questions/SupplementFirst.js","Questions/SupplementSecond.js","Questions/Supplement3.js","Jumbotron.js","ProgressBar.js","App.js","Questions/QuestionFreeAnswer.js","Questions/QuestionFirst.js","Questions/QuestionSecond.js","serviceWorker.js","index.js"],"names":["NextButton","props","className","onClick","nextButtonHandler","disabled","nextButtonState","Item","React","useState","activeAnswer","setActiveAnswer","setNextButtonState","nextQuestionHandler","activeQuestion","title","undefined","type","onChange","event","answer","target","value","answers","map","index","key","chooseVariantHandler","supplementQuestions","weights","weight1","Jumbotron","ProgressBar","role","style","width","progressBarState","aria-valuemin","aria-valuemax","questions","weight3","weight2","weight4","weight5","mainQuestionInProgress","supplementQuestionsInProgress","questionPointer","App","setActiveQuestion","parseInt","length","setProgressBarState","push","saveAnswerToArr","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e2bba00.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NextButton(props) {\n    //console.log(props.nextButtonState)\n    return (\n        <div>\n            <button className=\"btn btn-primary\" onClick={props.nextButtonHandler} disabled={!props.nextButtonState}>Следующий вопрос</button>\n        </div>\n    )\n}\n\nexport default NextButton","import React from 'react'\nimport NextButton from './NextButton'\n\nfunction Item(props) {\n\n    const [activeAnswer, setActiveAnswer] = React.useState('')\n    const [nextButtonState, setNextButtonState] = React.useState(false)\n\n\n    function changeTextInputHandler(event) {\n        //setInputValue(event.target.value)\n\n        setActiveAnswer({\n            title: props.activeQuestion.title,\n            answer: event.target.value\n        })\n\n        if (event.target.value !== '')\n            setNextButtonState(true)\n        else\n            setNextButtonState(false)\n\n    }\n\n    function chooseVariantHandler(answer) {\n        setActiveAnswer(answer)\n        setNextButtonState(true)\n\n    }\n\n    function nextButtonHandler() {\n        props.nextQuestionHandler(props.activeQuestion.title, activeAnswer)\n        setNextButtonState(false)\n        setActiveAnswer('')\n    }\n\n    if (props.activeQuestion === undefined) return ('Тест окончен!')\n\n    if (props.activeQuestion.type === 'text') {\n        return (\n            <div>\n                <div className=\" m-3 w-75 mx-auto\">\n                    <div className=\"m-3\">{props.activeQuestion.title}</div>\n                    <textarea className=\"form-control\"\n                        type=\"text\"\n                        onChange={changeTextInputHandler}\n                    ></textarea>\n                </div>\n                <NextButton nextButtonHandler={nextButtonHandler} nextButtonState={nextButtonState} />\n            </div>\n        )\n    }\n\n    if (props.activeQuestion.type === 'radiobutton') {\n        return (\n            <div className=\" m-3\">\n                <div>{props.activeQuestion.title}</div>\n                {props.activeQuestion.answers.map((answer, index) => {\n                    return (\n                        <div key={index}\n                            className=\"m-3 nav justify-content-center\">\n                            <button\n                                className={answer.title === activeAnswer.title ? \"btn btn-success w-75\" : \"btn btn-secondary w-75\"}\n\n                                onClick={() => chooseVariantHandler(answer)}>\n                                {answer.title}\n                            </button>\n                            <br />\n                        </div>\n                    )\n                })}\n                <NextButton nextButtonHandler={nextButtonHandler} nextButtonState={nextButtonState} />\n            </div>\n        )\n    }\n\n    // const divStyle = {\n    //     display: 'inline-block'\n    // }\n    // if (props.activeQuestion.type === 'radiobutton-picture') {\n    //     return (\n    //         <div className={props.animation}>\n    //             <div>{props.activeQuestion.title}</div>\n    //             {props.activeQuestion.answers.map((answer, index) => {\n    //                 return (\n    //                     <div key={index}\n    //                         style={divStyle}>\n    //                         <img\n    //                             src={answer.imageURL} alt='wolf' height=\"150\">\n    //                         </img>\n    //                         <div>\n    //                             <button\n    //                                 className={answer === checkedAnswer ? \"btn btn-primary\" : \"btn btn-secondary\"}\n    //                                 onClick={() => chooseVariantHandler(answer)}>\n    //                                 {answer.title}\n    //                             </button>\n    //                         </div>\n    //                     </div>\n    //                 )\n    //             })}\n    //         </div>\n    //     )\n    // }\n\n    return 'Тест окончен'\n}\n\nexport default Item\n","import QuestionFirst from './Questions/QuestionFirst'\nimport QuestionSecond from './Questions/QuestionSecond'\nimport QuestionFreeAnswer from './Questions/QuestionFreeAnswer'\nimport SupplementFirst from './Questions/SupplementFirst'\nimport SupplementSecond from './Questions/SupplementSecond'\nimport Supplement3 from './Questions/Supplement3'\n\n\n\nexport let mainQuestions = [\n  QuestionFreeAnswer,\n  QuestionFirst,\n  QuestionSecond\n]\n\nexport let supplementQuestions = [\n  SupplementFirst,\n  SupplementSecond,\n  Supplement3\n]\n\n\n\n//export default mainQuestions,supplementQuestions\n\n","const SupplementFirst = {\n    title: 'Ответьте на специфичный вопрос категории 2',\n    type: 'radiobutton',\n    answers: [\n      {\n        title: 'Ответьте на все вопросы для правильной постановки диагноза специалистом Ответьте на все вопросы для правильной постановки диагноза специалистом Ответьте на все вопросы для правильной постановки диагноза специалистом',\n        weights: {\n          weight1: 1\n        }\n      },\n      {\n        title: 'нет',\n        weights: {}\n      }\n    ]\n  }\n\n  export default SupplementFirst","const SupplementSecond = {\n    title: 'Ответьте на специфичный вопрос 2 категории 2',\n    type: 'radiobutton',\n    answers: [\n      {\n        title: 'Жатецкий гусь',\n        weights: {\n          weight1: 3\n        }\n      },\n      {\n        title: 'Моя Калуга',\n        weights: {}\n      }\n    ]\n  }\n\n  export default SupplementSecond","const Supplement3 = {\n    title: 'Ваш мобильный телефон',\n    type: 'radiobutton',\n    answers: [\n      {\n        title: 'Нокиа',\n        weights: {\n          weight1: 3\n        }\n      },\n      {\n        title: 'Андроид',\n        weights: {}\n      },\n      {\n        title: 'Самсунг',\n        weights: {}\n      }\n    ]\n  }\n\n  export default Supplement3","import React from 'react'\n\nfunction Jumbotron() {\n\n    return (\n        <div className=\"jumbotron \">\n            <div className=\"container-fluid\">\n                <h1 className=\"display-4\">Тест диагностики болей</h1>\n                <p className=\"lead\">Ответьте на все вопросы для правильной постановки диагноза специалистом</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron","import React from 'react'\n\nfunction ProgressBar(props) {\n\n\n    //console.log(props.progressBarState)\n    //setProgressPosition(props.progressBarState.current / props.progressBarState.total)\n    return (\n        <div className=\"w-75 mx-auto\">\n            <div className=\"text-left\">Основные вопросы:</div>\n            <div className=\"progress mx-auto\">\n                <div\n                    className=\"progress-bar\"\n                    role=\"progressbar\"\n                    style={{ width: props.progressBarState + \"%\" }}\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\">\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProgressBar","import React from 'react';\nimport './App.css';\nimport Item from './Item';\nimport { mainQuestions, supplementQuestions } from './QuestionList'\nimport Results from './Results';\nimport Jumbotron from './Jumbotron';\nimport ProgressBar from './ProgressBar';\n\nlet totalStates = {\n  state1: 0,\n  state2: 0,\n  state3: 0,\n  state4: 0,\n  state5: 0\n}\n\nlet answers = []\n\nlet questions = mainQuestions\nlet mainQuestionInProgress = true\nlet supplementQuestionsInProgress = false\n\nlet questionPointer = 0\n\n// function addWeigthAfterAnswer(answer) {\n//   if (!isNaN(answer.weights.weight1)) totalStates.state1 += answer.weights.weight1\n//   if (!isNaN(answer.weights.weight2)) totalStates.state2 += answer.weights.weight2\n//   if (!isNaN(answer.weights.weight3)) totalStates.state3 += answer.weights.weight3\n//   if (!isNaN(answer.weights.weight4)) totalStates.state4 += answer.weights.weight4\n//   if (!isNaN(answer.weights.weight5)) totalStates.state5 += answer.weights.weight5\n// }\n\n\nfunction saveAnswerToArr(title, answer) {\n  answers.push({\n    title: title,\n    answer: answer\n  })\n}\n\nfunction App() {\n\n\n\n  const [activeQuestion, setActiveQuestion] = React.useState(questions[0])\n  const [progressBarState, setProgressBarState] = React.useState(parseInt(((questionPointer / questions.length) * 100), 10))\n\n  //const [progressPosition,setProgressPosition] = React.useState(parseInt(((props.progressBarState.current / props.progressBarState.total)*100),10))\n\n  function nextQuestionHandler(title, answer) {\n    saveAnswerToArr(title, answer)\n\n\n\n    questionPointer++\n    if (questionPointer < questions.length)\n      setActiveQuestion(questions[questionPointer])\n    else {\n      mainQuestionInProgress = false\n    }\n\n    if (!mainQuestionInProgress && !supplementQuestionsInProgress) {\n      supplementQuestionsInProgress = true\n      questions = supplementQuestions\n      questionPointer = 0\n      setActiveQuestion(questions[questionPointer])\n    }\n\n    setProgressBarState(parseInt(((questionPointer / questions.length) * 100), 10))\n\n    console.log(answers)\n  }\n\n  //console.log(progressBarState)\n\n  return (\n    <div className=\"App\" >\n      <Jumbotron />\n      <div className=\"w-75 mx-auto bg-light\">\n        <ProgressBar progressBarState={progressBarState} />\n        <Item\n          activeQuestion={activeQuestion}\n          nextQuestionHandler={nextQuestionHandler}\n        />\n        {/*\n        <Results totalStates={totalStates} answers={answers}/>\n        */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const QuestionFreeAnswer = {\n    title: 'Вопрос со свободным ответом',\n    type: 'text'\n}\n\nexport default QuestionFreeAnswer","\n\nconst QuestionFirst = {\n    title: 'Болит ли у вас спина?',\n    type: 'radiobutton',\n    answers: [\n      {\n        title: 'Ответьте на все вопросы для правильной постановки диагноза специалистом Ответьте на все вопросы для правильной постановки диагноза специалистом Ответьте на все вопросы для правильной постановки диагноза специалистом',\n        weights: {\n          weight1: 1,\n          weight3: 5\n        }\n      },\n      {\n        title: 'нет',\n        weights: {}\n      }\n    ]\n  }\n\n  export default QuestionFirst","const QuestionSecond = {\n    title: 'Болит ли у вас жопа?',\n    type: 'radiobutton',\n    answers: [\n      {\n        title: 'да',\n        weights: {\n          weight1: 1,\n          weight2: 1\n        }\n      },\n      {\n        title: 'нет',\n        weights: {\n          weight4: 1\n        }\n      },\n      {\n        title: 'не знаю',\n        weights: {\n          weight5: 1\n        }\n      }\n    ]\n  }\n\n  export default QuestionSecond","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}