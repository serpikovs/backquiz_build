{"version":3,"sources":["Questions/pictures/genius1.png","Questions/pictures/genius2.png","Questions/pictures/genius3.png","Questions/pictures/squirrel.jpg","Questions/pictures/wolf.jpg","Questions/pictures/bear.jpg","NextButton.js","TextQuestion.js","ButtonsQuestion.js","PicturesQuestion.js","Item.js","States.js","QuestionList.js","Questions/MainQuestions.js","Questions/SupplementQuestions.js","Jumbotron.js","ProgressBar.js","Hello.js","Goodbye.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NextButton","props","className","onClick","nextButtonHandler","disabled","nextButtonState","TextQuestion","activeQuestion","title","type","onChange","event","setActiveAnswer","target","value","setNextButtonState","ButtonsQuestion","answers","map","answer","index","key","activeAnswer","chooseVariantHandler","divStyle","display","margin","PicturesQuestion","style","src","imageURL","alt","height","Item","React","useState","currentItem","undefined","nextQuestionHandler","States","0","id","localName","1","2","3","4","5","6","7","8","9","10","createWeights","weights","state","mainQuestions","require","weight","supplementQuestions","correspondingState","Jumbotron","ProgressBar","progressBarState","parseInt","done","total","role","width","aria-valuemin","aria-valuemax","Hello","email","form","setForm","emailHelpText","validationStatus","setValidationStatus","changeHandler","name","noValidate","htmlFor","aria-describedby","maxLength","required","e","preventDefault","isValid","formValidationStatus","saveHelloData","Goodbye","helloData","totalWeights","sectionsStatesObj","showHello","showQuestions","showGoodbye","questionsList","activeSectionName","questionPointer","progressBarTitle","restoredFromLSDone","App","localStorage","getItem","JSON","parse","setActiveQuestion","length","setProgressBarState","sectionsState","setSectionStates","console","log","requiredStatesArr","result","targetStates","forEach","question","includes","push","buildSupplenetsQuestionsList","data","mainActiveAreas","setMainActiveAreas","answeredQuestion","hasOwnProperty","element","saveAnswerToArr","setItem","stringify","clear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad9b2eac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/genius1.ddd44740.png\";","module.exports = __webpack_public_path__ + \"static/media/genius2.3577fdbf.png\";","module.exports = __webpack_public_path__ + \"static/media/genius3.1aea7175.png\";","module.exports = __webpack_public_path__ + \"static/media/squirrel.4c3618e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wolf.0f9be5ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bear.0f67b0c6.jpg\";","import React from 'react'\n\nfunction NextButton(props) {\n    //console.log(props.nextButtonState)\n    return (\n        <div>\n            <button className=\"btn btn-primary\" onClick={props.nextButtonHandler} disabled={!props.nextButtonState}>Следующий вопрос</button>\n        </div>\n    )\n}\n\nexport default NextButton","import React from 'react'\n\nfunction TextQuestion(props) {\n\n    function changeTextInputHandler(event) {\n        props.setActiveAnswer(event.target.value)\n\n        if (event.target.value !== '')\n            props.setNextButtonState(true)\n        else\n            props.setNextButtonState(false)\n    }\n\n    return (\n        <div className=\" m-3 w-75 mx-auto\">\n            <div className=\"m-3\">{props.activeQuestion.title}</div>\n            <textarea className=\"form-control\"\n                type=\"text\"\n                onChange={changeTextInputHandler}\n            ></textarea>\n        </div>\n    )\n}\n\nexport default TextQuestion","import React from 'react'\n\nfunction ButtonsQuestion(props) {\n\n    function chooseVariantHandler(answer) {\n        props.setActiveAnswer(answer)\n        props.setNextButtonState(true)\n    }\n\n    return (\n        <div>\n            <div>{props.activeQuestion.title}</div>\n            {props.activeQuestion.answers.map((answer, index) => {\n                return (\n                    <div key={index}\n                        className=\"m-3 nav justify-content-center\">\n                        <button\n                            className={answer.title === props.activeAnswer.title ? \"btn btn-success w-75\" : \"btn btn-secondary w-75\"}\n                            onClick={() => chooseVariantHandler(answer)}>\n                            {answer.title}\n                        </button>\n                        <br />\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ButtonsQuestion","import React from 'react'\n\nconst divStyle = {\n    display: 'inline-block',\n    margin: '10px' \n}\n\nfunction PicturesQuestion(props) {\n\n    function chooseVariantHandler(answer) {\n        props.setActiveAnswer(answer)\n        props.setNextButtonState(true)\n    }\n\n    return (\n        <div className=\"\">\n            <div>{props.activeQuestion.title}</div>\n            {props.activeQuestion.answers.map((answer, index) => {\n                return (\n                    <div key={index}\n                        style={divStyle}>\n                        <img\n                            src={answer.imageURL} alt='' height=\"150\">\n                        </img>\n                        <div className=\"m-3 \">\n                            <button\n                                className={answer.title === props.activeAnswer.title ? \"btn btn-primary\" : \"btn btn-secondary\"}\n                                onClick={() => chooseVariantHandler(answer)}>\n                                {answer.title}\n                            </button>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default PicturesQuestion","import React from 'react'\nimport NextButton from './NextButton'\nimport TextQuestion from './TextQuestion'\nimport ButtonsQuestion from './ButtonsQuestion'\nimport PicturesQuestion from './PicturesQuestion'\n\nfunction Item(props) {\n\n    const [activeAnswer, setActiveAnswer] = React.useState('')\n    const [nextButtonState, setNextButtonState] = React.useState(false)\n\n    function nextButtonHandler() {\n        props.nextQuestionHandler({\n            title: props.activeQuestion.title,\n            answer: activeAnswer\n        })\n        setNextButtonState(false)\n        setActiveAnswer('')\n    }\n\n    let currentItem = {}\n\n    if (props.activeQuestion.type === 'text')\n        currentItem = <TextQuestion\n            activeQuestion={props.activeQuestion}\n            setActiveAnswer={setActiveAnswer}\n            setNextButtonState={setNextButtonState} />\n\n    if (props.activeQuestion.type === 'buttons')\n        currentItem = <ButtonsQuestion\n            activeQuestion={props.activeQuestion}\n            setActiveAnswer={setActiveAnswer}\n            activeAnswer={activeAnswer}\n            setNextButtonState={setNextButtonState} />\n    if (props.activeQuestion.type === 'pictures') {\n        currentItem = <PicturesQuestion \n        activeQuestion={props.activeQuestion}\n        setActiveAnswer={setActiveAnswer}\n        activeAnswer={activeAnswer}\n        setNextButtonState={setNextButtonState} \n        />\n            \n    }\n\n    if (props.activeQuestion === undefined)\n        currentItem = 'Тест окончен!'\n\n    return (\n        <div>\n            {currentItem}\n            <NextButton nextButtonHandler={nextButtonHandler} nextButtonState={nextButtonState} />\n        </div>\n    )\n}\n\n// const divStyle = {\n//     display: 'inline-block'\n// }\n// if (props.activeQuestion.type === 'radiobutton-picture') {\n//     return (\n//         <div className={props.animation}>\n//             <div>{props.activeQuestion.title}</div>\n//             {props.activeQuestion.answers.map((answer, index) => {\n//                 return (\n//                     <div key={index}\n//                         style={divStyle}>\n//                         <img\n//                             src={answer.imageURL} alt='wolf' height=\"150\">\n//                         </img>\n//                         <div>\n//                             <button\n//                                 className={answer === checkedAnswer ? \"btn btn-primary\" : \"btn btn-secondary\"}\n//                                 onClick={() => chooseVariantHandler(answer)}>\n//                                 {answer.title}\n//                             </button>\n//                         </div>\n//                     </div>\n//                 )\n//             })}\n//         </div>\n//     )\n// }\n\n\nexport default Item\n","export const States = {\n\n    /**Грыжа диска*/\n    0: { id: 0, localName: 'Грыжа диска' },\n    /**Крестцово-подвздошный сустав */\n    1: { id: 1, localName: 'Крестцово-подвздошный сустав' },\n    /**Фасеточный синдром */\n    2: { id: 2, localName: 'Фасеточный синдром' },\n    /**Биомеханические причины боли */\n    3: { id: 3, localName: 'Биомеханические причины боли' },\n    /**Миофасциальный синдром */\n    4: { id: 4, localName: 'Миофасциальный синдром' },\n    /**Стеноз позвоночного канала */\n    5: { id: 5, localName: 'Стеноз позвоночного канала' },\n    /**Грушевидный синдром */\n    6: { id: 6, localName: 'Грушевидный синдром' },\n    /**Протрузия */\n    7: { id: 7, localName: 'Протрузия' },\n    /**Метастазы и другие страшные состояния, требующие неотложного визита к врачу */\n    8: { id: 8, localName: 'Метастазы и другие страшные состояния, требующие неотложного визита к врачу' },\n    /**Спондилолистез */\n    9: { id: 9, localName: 'Спондилолистез' },\n    /**Соматические расстройства */\n    10: { id: 10, localName: 'Соматические расстройства' },\n}\n\n\nexport function createWeights() {\n    let weights = {}\n\n\n    for (const key in States) {\n        const state = States[key];\n        weights[key] = { state, value: 0 }\n    }\n\n    return weights\n}\n\nexport default { States, createWeights }\n\n","import MainQuestions from './Questions/MainQuestions'\nimport SupplementQuestions from './Questions/SupplementQuestions'\n\nexport const questionsVersion = '0.0'\n\nexport let mainQuestions = MainQuestions\nexport let supplementQuestions = SupplementQuestions\n\n//export default mainQuestions,supplementQuestions\n\n","import { States } from '../States'\n\nconst MainQuestions = [{\n    title: 'Насколько сильно у Вас болит голова?',\n    type: 'pictures',\n    answers: [\n        {\n            title: 'Не сильно',\n            imageURL: require('./pictures/genius1.png'),\n            weights: [\n                { weight: States[3], value: 3 }\n            ]\n        },\n        {\n            title: 'Средне',\n            imageURL: require('./pictures/genius2.png'),\n            weights: []\n        },\n        {\n            title: 'Сильно',\n            imageURL: require('./pictures/genius3.png'),\n            weights: []\n        }\n    ]\n},\n{\n    title: 'Какое животное вы видели в лесу?',\n    type: 'pictures',\n    answers: [\n        {\n            title: 'Белка',\n            imageURL: require('./pictures/squirrel.jpg'),\n            weights: [\n                { weight: States[3], value: 3 }\n            ]\n        },\n        {\n            title: 'Волк',\n            imageURL: require('./pictures/wolf.jpg'),\n            weights: []\n        },\n        {\n            title: 'Медведь',\n            imageURL: require('./pictures/bear.jpg'),\n            weights: []\n        }\n    ]\n},\n{\n    title: 'Напишите ваши впечатления:',\n    type: 'text'\n},\n{\n    title: 'Болит ли у вас спина?',\n    type: 'buttons',\n    answers: [\n        {\n            title: 'да',\n            weights: [\n                { weight: States[3], value: 3 }\n            ]\n        },\n        {\n            title: 'нет',\n            weights: []\n        }\n    ]\n},\n{\n    title: 'Болит ли у вас нога?',\n    type: 'buttons',\n\n    answers: [\n        {\n            title: 'да',\n            weights: [\n                { weight: States[1], value: 1 }\n            ]\n        },\n        {\n            title: 'нет',\n            weights: [\n            ]\n        },\n        {\n            title: 'не знаю',\n            weights: [\n            ]\n        }\n    ]\n}\n]\n\nexport default MainQuestions","import { States } from '../States'\n\nconst SupplementQuestions = [\n    {\n        title: 'Ответьте на специфичный вопрос категории 2',\n        type: 'buttons',\n        correspondingState: States[0],\n        answers: [\n            {\n                title: 'Ответьте на все вопросы для правильной постановки диагноза специалистом',\n                weights: []\n            },\n            {\n                title: 'нет',\n                weights: []\n            }\n        ]\n    },\n    {\n        title: 'Ответьте на специфичный вопрос 2 категории 2',\n        type: 'buttons',\n        correspondingState: States[3],\n        answers: [\n            {\n                title: 'Жатецкий гусь',\n                weights: []\n            },\n            {\n                title: 'Моя Калуга',\n                weights: []\n            }\n        ]\n    },\n    {\n        title: 'Ваш мобильный телефон',\n        type: 'buttons',\n        correspondingState: States[0],\n        answers: [\n            {\n                title: 'Нокиа',\n                weights: []\n            },\n            {\n                title: 'Андроид',\n                weights: []\n            },\n            {\n                title: 'Самсунг',\n                weights: []\n            }\n        ]\n    }\n]\n\nexport default SupplementQuestions","import React from 'react'\n\nfunction Jumbotron() {\n\n    return (\n        <div className=\"jumbotron \">\n            <div className=\"container-fluid\">\n                <h1 className=\"display-4\">Тест диагностики болей</h1>\n                <p className=\"lead\">Ответьте на все вопросы для правильной постановки диагноза специалистом</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron","import React from 'react'\n\nfunction ProgressBar(props) {\n\n    return (\n        <div className=\"w-75 mx-auto px-3\">\n            <div className=\"text-left\">{props.progressBarState.title}: ({(parseInt(props.progressBarState.done,10)+1)}/{props.progressBarState.total})</div>\n            <div className=\"progress mx-auto\">\n                <div\n                    className=\"progress-bar\"\n                    role=\"progressbar\"\n                    style={{ width: parseInt(((props.progressBarState.done / props.progressBarState.total) * 100), 10) + \"%\" }}\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\">\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProgressBar","import React from 'react'\n\nfunction Hello(props) {\n\n    const [form, setForm] = React.useState({ email: '' })\n    const [validationStatus, setValidationStatus] = React.useState({ emailHelpText: '' })\n\n    function changeHandler(event) {\n        setForm({ ...form, [event.target.name]: event.target.value })\n    }\n\n    function validateEmail(email) {\n        return true\n    }\n\n    function onclickHandler(e) {\n        e.preventDefault();\n        let isValid = true\n        let emailHelpText = ''\n        if (!validateEmail(form.email)) {\n            emailHelpText = 'Неверный email'\n            isValid = false\n        }\n\n        setValidationStatus({ ...validationStatus, emailHelpText: emailHelpText, formValidationStatus: isValid })\n\n        //save data\n        if (isValid) props.saveHelloData(form)\n    }\n\n\n    return (\n        <div>\n            <div className=\"p-3\">Приветствуем вас! Укажите ваши координаты, чтобы врач смог быстро найти ваш результат:</div>\n            <form noValidate>\n                <div className=\"mx-auto pb-3\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"float-left\">Имя</label>\n                    <input type=\"email\" className=\"form-control\" name=\"firstName\" aria-describedby=\"emailHelp\" maxLength=\"100\" onChange={changeHandler} />\n                    <small id=\"emailHelp\" className=\"form-text text-muted float-left\"></small>\n                </div>\n                <div className=\"mx-auto pb-3\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"float-left\">Фамилия</label>\n                    <input type=\"email\" className=\"form-control\" name=\"secondName\" aria-describedby=\"emailHelp\" maxLength=\"100\" onChange={changeHandler} />\n                    <small id=\"emailHelp\" className=\"form-text text-muted float-left\"></small>\n                </div>\n                <div className=\"mx-auto pb-4\">\n                    <label htmlFor=\"exampleInputEmail1\" className=\"float-left\">Email</label>\n                    <input type=\"email\" className=\"form-control \" name=\"email\" maxLength=\"200\" required onChange={changeHandler} />\n                    <small id=\"emailHelp\" className=\"form-text text-muted float-left\" >{validationStatus.emailHelpText}</small>\n                    <div className=\"invalid-feedback\">\n                        Please choose a username.\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary float-left\" onClick={onclickHandler}>Начать!</button>\n\n\n                \n            </form>\n        </div>\n    )\n}\n\nexport default Hello","import React from 'react'\n\nfunction Goodbye(props) {\n\n    return (\n        <div>\n            Тест окончен! Результаты направлены доктору, спасибо!\n        </div>\n    )\n}\n\nexport default Goodbye","import React from 'react';\nimport './App.css';\nimport Item from './Item';\nimport { mainQuestions, supplementQuestions } from './QuestionList'\nimport Jumbotron from './Jumbotron';\nimport ProgressBar from './ProgressBar';\nimport { States, createWeights } from './States'\nimport Hello from './Hello'\nimport Goodbye from './Goodbye'\n\n//results\nlet helloData = {}\nlet totalWeights = createWeights(States)\nlet answers = []\n\n//section\nlet sectionsStatesObj = { showHello: false, showQuestions: true, showGoodbye: false }\n\n//questions\nlet questionsList = mainQuestions\nlet sectionsNames = ['mainQuestions', 'supplementQuestions']\nlet activeSectionName = sectionsNames[0]\nlet questionPointer = 0\nlet progressBarTitle = 'Основные вопросы'\n\n//Local Storage\nlet restoredFromLSDone = false\n\n\nfunction saveAnswerToArr(answeredQuestion) {\n  answers.push(answeredQuestion)\n\n  if (answeredQuestion.answer.hasOwnProperty(\"weights\"))\n    answeredQuestion.answer.weights.forEach(element => {\n      totalWeights[element.weight.id].value += element.value\n    });\n\n  console.log(totalWeights)\n}\n\nfunction saveToLocalStorage() {\n  localStorage.setItem('questionPointer', questionPointer)\n  localStorage.setItem('activeSectionName', activeSectionName)\n\n  localStorage.setItem('sectionsStatesObj', JSON.stringify(sectionsStatesObj))\n\n  localStorage.setItem('answers', JSON.stringify(answers))\n  localStorage.setItem('helloData', JSON.stringify(helloData))\n  localStorage.setItem('totalWeights', JSON.stringify(totalWeights))\n}\n\nfunction restoreFromLocalStorage() {\n  if (localStorage.getItem('questionPointer')) {\n    questionPointer = localStorage.getItem('questionPointer')\n    activeSectionName = localStorage.getItem('activeSectionName')\n\n    sectionsStatesObj = JSON.parse(localStorage.getItem('sectionsStatesObj'))\n\n    answers = JSON.parse(localStorage.getItem('answers'))\n    helloData = JSON.parse(localStorage.getItem('helloData'))\n    totalWeights = JSON.parse(localStorage.getItem('totalWeights'))\n  }\n}\n\nfunction buildSupplenetsQuestionsList(requiredStatesArr) {\n  let result = []\n  const targetStates = requiredStatesArr //todo\n  supplementQuestions.forEach(question => {\n    if (targetStates.includes(question.correspondingState)) {\n      result.push(question)\n    }\n  })\n\n  return result\n}\n\nfunction App() {\n  if (!restoredFromLSDone) {\n    restoreFromLocalStorage()\n    restoredFromLSDone = true\n  }\n  const [activeQuestion, setActiveQuestion] = React.useState(questionsList[questionPointer])\n  const [progressBarState, setProgressBarState] = React.useState({ title: progressBarTitle, done: questionPointer, total: questionsList.length })\n  const [sectionsState, setSectionStates] = React.useState(sectionsStatesObj)\n\n  //parseInt(((questionPointer / questionsList.length) * 100), 10)\n\n  console.log(buildSupplenetsQuestionsList([States[3], States[0]]))\n\n  function sendHandler() {\n    fetch('/save', {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ data: answers })\n    })\n  }\n\n  function saveHelloData(data) {\n    helloData = data\n    //start questions\n    setSectionStates({ ...sectionsState, showHello: false, showQuestions: true })\n  }\n\n  function nextQuestionHandler(answeredQuestion) {\n    saveAnswerToArr(answeredQuestion)\n\n\n\n    questionPointer++\n    if (questionPointer < questionsList.length) {\n      setActiveQuestion(questionsList[questionPointer])\n      saveToLocalStorage()\n    }\n\n    if (activeSectionName === 'mainQuestions' && questionPointer === questionsList.length) {\n      questionPointer = 0\n      activeSectionName = 'supplementQuestions'\n      questionsList = supplementQuestions\n      setActiveQuestion(questionsList[questionPointer])\n      progressBarTitle = 'Уточняющие вопросы'\n    }\n    if (activeSectionName === 'supplementQuestions' && questionPointer === questionsList.length) {\n      localStorage.clear()\n      setSectionStates({ ...sectionsState, showHello: false, showQuestions: false, showGoodbye: true })\n    }\n\n\n    setProgressBarState({ title: progressBarTitle, done: questionPointer, total: questionsList.length })\n    //console.log(sectionPointer)\n    //console.log(answers)\n  }\n\n  return (\n    <div className=\"App\" >\n      <Jumbotron />\n      <div className=\"w-50 mx-auto\">\n        {sectionsState.showHello &&\n          <Hello\n            saveHelloData={saveHelloData}\n            mainActiveAreas={sectionsState}\n            setMainActiveAreas={setSectionStates}\n          />}\n        {sectionsState.showQuestions &&\n          <div>\n            <ProgressBar progressBarState={progressBarState} />\n            <Item\n              activeQuestion={activeQuestion}\n              nextQuestionHandler={nextQuestionHandler} />\n          </div>}\n        {sectionsState.showGoodbye &&\n          <div>\n            <Goodbye />\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}